'use strict';function cov_1ifrg41uvu(){var path="C:\\JavaSafariTranining\\clm-poc\\doc-management-lambda\\processPDF\\app.js";var hash="f2670d79e85f1afb4a515675661fb4f9d62a771f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\JavaSafariTranining\\clm-poc\\doc-management-lambda\\processPDF\\app.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:30}},"1":{start:{line:4,column:0},end:{line:4,column:42}},"2":{start:{line:6,column:11},end:{line:6,column:23}},"3":{start:{line:7,column:12},end:{line:7,column:32}},"4":{start:{line:14,column:0},end:{line:28,column:1}},"5":{start:{line:16,column:2},end:{line:16,column:45}},"6":{start:{line:19,column:2},end:{line:27,column:3}},"7":{start:{line:21,column:5},end:{line:25,column:6}},"8":{start:{line:22,column:7},end:{line:22,column:35}},"9":{start:{line:24,column:7},end:{line:24,column:45}},"10":{start:{line:31,column:24},end:{line:77,column:1}},"11":{start:{line:34,column:17},end:{line:34,column:37}},"12":{start:{line:35,column:14},end:{line:35,column:73}},"13":{start:{line:37,column:2},end:{line:37,column:47}},"14":{start:{line:40,column:17},end:{line:43,column:14}},"15":{start:{line:44,column:2},end:{line:44,column:22}},"16":{start:{line:47,column:19},end:{line:47,column:65}},"17":{start:{line:48,column:2},end:{line:48,column:24}},"18":{start:{line:49,column:19},end:{line:49,column:36}},"19":{start:{line:52,column:2},end:{line:53,column:17}},"20":{start:{line:53,column:4},end:{line:53,column:17}},"21":{start:{line:56,column:4},end:{line:56,column:29}},"22":{start:{line:60,column:2},end:{line:76,column:3}},"23":{start:{line:62,column:17},end:{line:62,column:39}},"24":{start:{line:63,column:4},end:{line:63,column:54}},"25":{start:{line:66,column:4},end:{line:72,column:17}},"26":{start:{line:75,column:4},end:{line:75,column:42}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:18},end:{line:14,column:19}},loc:{start:{line:14,column:35},end:{line:28,column:1}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:21},end:{line:20,column:22}},loc:{start:{line:20,column:38},end:{line:26,column:4}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:31,column:24},end:{line:31,column:25}},loc:{start:{line:31,column:41},end:{line:77,column:1}},line:31}},branchMap:{"0":{loc:{start:{line:52,column:2},end:{line:53,column:17}},type:"if",locations:[{start:{line:52,column:2},end:{line:53,column:17}},{start:{line:52,column:2},end:{line:53,column:17}}],line:52},"1":{loc:{start:{line:52,column:5},end:{line:52,column:46}},type:"binary-expr",locations:[{start:{line:52,column:5},end:{line:52,column:21}},{start:{line:52,column:25},end:{line:52,column:46}}],line:52}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f2670d79e85f1afb4a515675661fb4f9d62a771f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1ifrg41uvu=function(){return actualCoverage;};}return actualCoverage;}cov_1ifrg41uvu();const AWS=(cov_1ifrg41uvu().s[0]++,require('aws-sdk'));cov_1ifrg41uvu().s[1]++;AWS.config.region=process.env.AWS_REGION;const s3=(cov_1ifrg41uvu().s[2]++,new AWS.S3());const pdf=(cov_1ifrg41uvu().s[3]++,require('pdf-parse'));// Invoked when a PDF is put into the source
// bucket. Extracts text content and saves into
// staging bucket (OutputBucket).
// The standard Lambda handler
cov_1ifrg41uvu().s[4]++;exports.handler=async event=>{cov_1ifrg41uvu().f[0]++;cov_1ifrg41uvu().s[5]++;console.log(JSON.stringify(event,null,2));// Handle each incoming S3 object in the event
cov_1ifrg41uvu().s[6]++;await Promise.all(event.Records.map(async event=>{cov_1ifrg41uvu().f[1]++;cov_1ifrg41uvu().s[7]++;try{cov_1ifrg41uvu().s[8]++;await processDocument(event);}catch(err){cov_1ifrg41uvu().s[9]++;console.error(`Handler error: ${err}`);}}));};// The standard Lambda handler
cov_1ifrg41uvu().s[10]++;const processDocument=async event=>{cov_1ifrg41uvu().f[2]++;// Get object info
const Bucket=(cov_1ifrg41uvu().s[11]++,event.s3.bucket.name);const Key=(cov_1ifrg41uvu().s[12]++,decodeURIComponent(event.s3.object.key.replace(/\+/g,' ')));cov_1ifrg41uvu().s[13]++;console.log(`Bucket: ${Bucket}, Key: ${Key}`);// Get content from source S3 object
const result=(cov_1ifrg41uvu().s[14]++,await s3.getObject({Bucket,Key}).promise());cov_1ifrg41uvu().s[15]++;console.log(result);// Get meta data from S3 object
const metaData=(cov_1ifrg41uvu().s[16]++,await s3.headObject({Bucket,Key}).promise());cov_1ifrg41uvu().s[17]++;console.log(metaData);const Metadata=(cov_1ifrg41uvu().s[18]++,metaData.Metadata);// If any meta data present in the uploaded s3 object then pass it to next process
cov_1ifrg41uvu().s[19]++;if((cov_1ifrg41uvu().b[1][0]++,Metadata==null)||(cov_1ifrg41uvu().b[1][1]++,Metadata==undefined)){cov_1ifrg41uvu().b[0][0]++;cov_1ifrg41uvu().s[20]++;Metadata={};}else{cov_1ifrg41uvu().b[0][1]++;}// Adding an additional metadata for object url
cov_1ifrg41uvu().s[21]++;Metadata['doc_key']=Key;cov_1ifrg41uvu().s[22]++;try{// Extract text from PDF
const data=(cov_1ifrg41uvu().s[23]++,await pdf(result.Body));cov_1ifrg41uvu().s[24]++;console.log('PDF text length: ',data.text.length);// Write result to staging S3 bucket
cov_1ifrg41uvu().s[25]++;console.log(await s3.putObject({Bucket:process.env.OutputBucket,Key:`pdf/${Key}.txt`,Body:data.text,ContentType:'application/text',Metadata:Metadata}).promise());}catch(err){cov_1ifrg41uvu().s[26]++;console.error(`Handler error: ${err}`);}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJBV1MiLCJyZXF1aXJlIiwiY29uZmlnIiwicmVnaW9uIiwicHJvY2VzcyIsImVudiIsIkFXU19SRUdJT04iLCJzMyIsIlMzIiwicGRmIiwiZXhwb3J0cyIsImhhbmRsZXIiLCJldmVudCIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwiUHJvbWlzZSIsImFsbCIsIlJlY29yZHMiLCJtYXAiLCJwcm9jZXNzRG9jdW1lbnQiLCJlcnIiLCJlcnJvciIsIkJ1Y2tldCIsImJ1Y2tldCIsIm5hbWUiLCJLZXkiLCJkZWNvZGVVUklDb21wb25lbnQiLCJvYmplY3QiLCJrZXkiLCJyZXBsYWNlIiwicmVzdWx0IiwiZ2V0T2JqZWN0IiwicHJvbWlzZSIsIm1ldGFEYXRhIiwiaGVhZE9iamVjdCIsIk1ldGFkYXRhIiwidW5kZWZpbmVkIiwiZGF0YSIsIkJvZHkiLCJ0ZXh0IiwibGVuZ3RoIiwicHV0T2JqZWN0IiwiT3V0cHV0QnVja2V0IiwiQ29udGVudFR5cGUiXSwibWFwcGluZ3MiOiJBQUFBLGEseW5HQWVZOzJGQWJaLEtBQU1BLENBQUFBLEdBQUcsMEJBQUdDLE9BQU8sQ0FBQyxTQUFELENBQVYsQ0FBVCxDLHdCQUNBRCxHQUFHLENBQUNFLE1BQUosQ0FBV0MsTUFBWCxDQUFvQkMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFVBQWhDLENBRUEsS0FBTUMsQ0FBQUEsRUFBRSwwQkFBRyxHQUFJUCxDQUFBQSxHQUFHLENBQUNRLEVBQVIsRUFBSCxDQUFSLENBQ0EsS0FBTUMsQ0FBQUEsR0FBRywwQkFBR1IsT0FBTyxDQUFDLFdBQUQsQ0FBVixDQUFULENBRUE7QUFDQTtBQUNBO0FBRUE7d0JBQ0FTLE9BQU8sQ0FBQ0MsT0FBUixDQUFrQixLQUFPQyxDQUFBQSxLQUFQLEVBQWlCLGlEQUVqQ0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixLQUFmLENBQXNCLElBQXRCLENBQTRCLENBQTVCLENBQVosRUFFQTtBQUppQyx3QkFLakMsS0FBTUssQ0FBQUEsT0FBTyxDQUFDQyxHQUFSLENBQ0xOLEtBQUssQ0FBQ08sT0FBTixDQUFjQyxHQUFkLENBQWtCLEtBQU9SLENBQUFBLEtBQVAsRUFBaUIsaURBQ2pDLEdBQUkseUJBQ0YsS0FBTVMsQ0FBQUEsZUFBZSxDQUFDVCxLQUFELENBQXJCLENBQ0QsQ0FBQyxNQUFPVSxHQUFQLENBQVkseUJBQ1pULE9BQU8sQ0FBQ1UsS0FBUixDQUFlLGtCQUFpQkQsR0FBSSxFQUFwQyxFQUNELENBQ0YsQ0FORCxDQURLLENBQU4sQ0FTRCxDQWRELENBZ0JBO3lCQUNBLEtBQU1ELENBQUFBLGVBQWUsQ0FBRyxLQUFPVCxDQUFBQSxLQUFQLEVBQWlCLHlCQUV2QztBQUNBLEtBQU1ZLENBQUFBLE1BQU0sMkJBQUdaLEtBQUssQ0FBQ0wsRUFBTixDQUFTa0IsTUFBVCxDQUFnQkMsSUFBbkIsQ0FBWixDQUNBLEtBQU1DLENBQUFBLEdBQUcsMkJBQUdDLGtCQUFrQixDQUFDaEIsS0FBSyxDQUFDTCxFQUFOLENBQVNzQixNQUFULENBQWdCQyxHQUFoQixDQUFvQkMsT0FBcEIsQ0FBNEIsS0FBNUIsQ0FBbUMsR0FBbkMsQ0FBRCxDQUFyQixDQUFULENBSnVDLHlCQU12Q2xCLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLFdBQVVVLE1BQU8sVUFBU0csR0FBSSxFQUEzQyxFQUVBO0FBQ0EsS0FBTUssQ0FBQUEsTUFBTSwyQkFBRyxLQUFNekIsQ0FBQUEsRUFBRSxDQUFDMEIsU0FBSCxDQUFhLENBQ2hDVCxNQURnQyxDQUVoQ0csR0FGZ0MsQ0FBYixFQUdsQk8sT0FIa0IsRUFBVCxDQUFaLENBVHVDLHlCQWF2Q3JCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZa0IsTUFBWixFQUVBO0FBQ0EsS0FBTUcsQ0FBQUEsUUFBUSwyQkFBRyxLQUFNNUIsQ0FBQUEsRUFBRSxDQUFDNkIsVUFBSCxDQUFjLENBQUVaLE1BQUYsQ0FBVUcsR0FBVixDQUFkLEVBQStCTyxPQUEvQixFQUFULENBQWQsQ0FoQnVDLHlCQWlCdkNyQixPQUFPLENBQUNDLEdBQVIsQ0FBWXFCLFFBQVosRUFDQSxLQUFNRSxDQUFBQSxRQUFRLDJCQUFHRixRQUFRLENBQUNFLFFBQVosQ0FBZCxDQUVBO0FBcEJ1Qyx5QkFxQnZDLEdBQUcsNEJBQUFBLFFBQVEsRUFBSSxJQUFaLCtCQUFvQkEsUUFBUSxFQUFJQyxTQUFoQyxDQUFILENBQ0UscURBQUFELFFBQVEsQ0FBRyxFQUFYLENBQWEsQ0FEZixpQ0FHRTtBQXhCcUMseUJBeUJyQ0EsUUFBUSxDQUFDLFNBQUQsQ0FBUixDQUFzQlYsR0FBdEIsQ0F6QnFDLHlCQTZCdkMsR0FBSSxDQUNGO0FBQ0EsS0FBTVksQ0FBQUEsSUFBSSwyQkFBRyxLQUFNOUIsQ0FBQUEsR0FBRyxDQUFDdUIsTUFBTSxDQUFDUSxJQUFSLENBQVosQ0FBVixDQUZFLHlCQUdGM0IsT0FBTyxDQUFDQyxHQUFSLENBQVksbUJBQVosQ0FBaUN5QixJQUFJLENBQUNFLElBQUwsQ0FBVUMsTUFBM0MsRUFFQTtBQUxFLHlCQU1GN0IsT0FBTyxDQUFDQyxHQUFSLENBQVksS0FBTVAsQ0FBQUEsRUFBRSxDQUFDb0MsU0FBSCxDQUFhLENBQzdCbkIsTUFBTSxDQUFFcEIsT0FBTyxDQUFDQyxHQUFSLENBQVl1QyxZQURTLENBRTdCakIsR0FBRyxDQUFHLE9BQU1BLEdBQUksTUFGYSxDQUc3QmEsSUFBSSxDQUFFRCxJQUFJLENBQUNFLElBSGtCLENBSTdCSSxXQUFXLENBQUUsa0JBSmdCLENBSzdCUixRQUFRLENBQUVBLFFBTG1CLENBQWIsRUFNZkgsT0FOZSxFQUFsQixFQVFELENBQUMsTUFBT1osR0FBUCxDQUFZLDBCQUNaVCxPQUFPLENBQUNVLEtBQVIsQ0FBZSxrQkFBaUJELEdBQUksRUFBcEMsRUFDRCxDQUNGLENBOUNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXHJcblxyXG5jb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJylcclxuQVdTLmNvbmZpZy5yZWdpb24gPSBwcm9jZXNzLmVudi5BV1NfUkVHSU9OIFxyXG5cclxuY29uc3QgczMgPSBuZXcgQVdTLlMzKClcclxuY29uc3QgcGRmID0gcmVxdWlyZSgncGRmLXBhcnNlJylcclxuXHJcbi8vIEludm9rZWQgd2hlbiBhIFBERiBpcyBwdXQgaW50byB0aGUgc291cmNlXHJcbi8vIGJ1Y2tldC4gRXh0cmFjdHMgdGV4dCBjb250ZW50IGFuZCBzYXZlcyBpbnRvXHJcbi8vIHN0YWdpbmcgYnVja2V0IChPdXRwdXRCdWNrZXQpLlxyXG5cclxuLy8gVGhlIHN0YW5kYXJkIExhbWJkYSBoYW5kbGVyXHJcbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudCkgPT4ge1xyXG5cclxuICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShldmVudCwgbnVsbCwgMikpXHJcblxyXG4gIC8vIEhhbmRsZSBlYWNoIGluY29taW5nIFMzIG9iamVjdCBpbiB0aGUgZXZlbnRcclxuICBhd2FpdCBQcm9taXNlLmFsbChcclxuICAgZXZlbnQuUmVjb3Jkcy5tYXAoYXN5bmMgKGV2ZW50KSA9PiB7XHJcbiAgICAgdHJ5IHtcclxuICAgICAgIGF3YWl0IHByb2Nlc3NEb2N1bWVudChldmVudClcclxuICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgIGNvbnNvbGUuZXJyb3IoYEhhbmRsZXIgZXJyb3I6ICR7ZXJyfWApXHJcbiAgICAgfVxyXG4gICB9KVxyXG4gIClcclxufVxyXG5cclxuLy8gVGhlIHN0YW5kYXJkIExhbWJkYSBoYW5kbGVyXHJcbmNvbnN0IHByb2Nlc3NEb2N1bWVudCA9IGFzeW5jIChldmVudCkgPT4ge1xyXG5cclxuICAvLyBHZXQgb2JqZWN0IGluZm9cclxuICBjb25zdCBCdWNrZXQgPSBldmVudC5zMy5idWNrZXQubmFtZVxyXG4gIGNvbnN0IEtleSA9IGRlY29kZVVSSUNvbXBvbmVudChldmVudC5zMy5vYmplY3Qua2V5LnJlcGxhY2UoL1xcKy9nLCAnICcpKVxyXG4gIFxyXG4gIGNvbnNvbGUubG9nKGBCdWNrZXQ6ICR7QnVja2V0fSwgS2V5OiAke0tleX1gKVxyXG5cclxuICAvLyBHZXQgY29udGVudCBmcm9tIHNvdXJjZSBTMyBvYmplY3RcclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBzMy5nZXRPYmplY3Qoe1xyXG4gICAgQnVja2V0LFxyXG4gICAgS2V5XHJcbiAgfSkucHJvbWlzZSgpXHJcbiAgY29uc29sZS5sb2cocmVzdWx0KTtcclxuXHJcbiAgLy8gR2V0IG1ldGEgZGF0YSBmcm9tIFMzIG9iamVjdFxyXG4gIGNvbnN0IG1ldGFEYXRhID0gYXdhaXQgczMuaGVhZE9iamVjdCh7IEJ1Y2tldCwgS2V5IH0pLnByb21pc2UoKTtcclxuICBjb25zb2xlLmxvZyhtZXRhRGF0YSk7XHJcbiAgY29uc3QgTWV0YWRhdGEgPSBtZXRhRGF0YS5NZXRhZGF0YVxyXG5cclxuICAvLyBJZiBhbnkgbWV0YSBkYXRhIHByZXNlbnQgaW4gdGhlIHVwbG9hZGVkIHMzIG9iamVjdCB0aGVuIHBhc3MgaXQgdG8gbmV4dCBwcm9jZXNzXHJcbiAgaWYoTWV0YWRhdGEgPT0gbnVsbCB8fCBNZXRhZGF0YSA9PSB1bmRlZmluZWQpXHJcbiAgICBNZXRhZGF0YSA9IHt9XHJcblxyXG4gICAgLy8gQWRkaW5nIGFuIGFkZGl0aW9uYWwgbWV0YWRhdGEgZm9yIG9iamVjdCB1cmxcclxuICAgIE1ldGFkYXRhWydkb2Nfa2V5J10gPSBLZXlcclxuXHJcblxyXG5cclxuICB0cnkge1xyXG4gICAgLy8gRXh0cmFjdCB0ZXh0IGZyb20gUERGXHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGRmKHJlc3VsdC5Cb2R5KVxyXG4gICAgY29uc29sZS5sb2coJ1BERiB0ZXh0IGxlbmd0aDogJywgZGF0YS50ZXh0Lmxlbmd0aClcclxuXHJcbiAgICAvLyBXcml0ZSByZXN1bHQgdG8gc3RhZ2luZyBTMyBidWNrZXRcclxuICAgIGNvbnNvbGUubG9nKGF3YWl0IHMzLnB1dE9iamVjdCh7XHJcbiAgICAgIEJ1Y2tldDogcHJvY2Vzcy5lbnYuT3V0cHV0QnVja2V0LFxyXG4gICAgICBLZXk6IGBwZGYvJHtLZXl9LnR4dGAsXHJcbiAgICAgIEJvZHk6IGRhdGEudGV4dCxcclxuICAgICAgQ29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi90ZXh0JyxcclxuICAgICAgTWV0YWRhdGE6IE1ldGFkYXRhXHJcbiAgICB9KS5wcm9taXNlKCkpXHJcblxyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5lcnJvcihgSGFuZGxlciBlcnJvcjogJHtlcnJ9YClcclxuICB9XHJcbn1cclxuIl19